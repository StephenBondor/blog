webpackJsonp([0x81b8806e4260],{341:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Pav Sidhu"}},allMarkdownRemark:{edges:[{node:{frontmatter:{path:"/labs-week-one",date:"15th February 2019",title:"Labs Week One"},excerpt:"As a part of your journal entry, write ¼ to ½ a page reflecting on your individual contributions to analyzing the project specification and writing the TDD. Describe the research you personally conducted to find out information on a…",html:'<blockquote>\n<p>As a part of your journal entry, write ¼ to ½ a page reflecting on your individual contributions to analyzing the project specification and writing the TDD. Describe the research you personally conducted to find out information on a competitor, investigate a technical solution to a specific problem, or define your customers.\nAs a group, provide links to evidence that:\nFront end is deployed with a recognizable name. The site can be visited and will load a simple message\nBack end is deployed with a recognizable name. The address can be visited and will return data\nUser models: Either through a tool, or the front end, user models with dummy data can be accessed.</p>\n</blockquote>\n<p>In pursuit of this end I am writing this blog post.</p>\n<p>This week was a difficult week. We spent most of the week trying to make up the technical debt we inherited from a project built on graphQL and mongoDB, two frameworks which no one in our group understood on Monday. However, here on Friday, I have deployed this very blog using graphQL.</p>\n<h4>WhAt aM I dOiNg</h4>\n<p>As the self-proclaimed team organizational lead, last week, I took it upon myself to assign roles in our group and attempt to divide labor up and define rolls. I also lightly influenced the composition of our team by recruiting some of the best developers in our program in the fields our team composition may have been lacking in.</p>\n<h4>TDD</h4>\n<p>As a group we (mostly my awesome team) authored our Technical Design Document on Monday and Tuesday, to meet our specifications. My personal contribution to this was giving the final read over and presenting the document and our plan to our Client in a 15 minute (ish) presentation.</p>\n<p>In preparation for this, we played around with competitive products and got a feel for the kind of experience we were tasked with building.</p>\n<p>We were accepted immediately, and moved onto development.</p>\n<h4>Study</h4>\n<p>Upon gaining access to the repository, we began the long slog up hill trying to wrap our heads around the entirely foreign tech stack we now had to digest in days. In pursuit of this, much of time I spent this week was working through <a href="https://www.howtographql.com/basics/2-core-concepts/">this tutorial</a> on graphQL, which is excellent.</p>\n<p><img src="study-streak.png" alt="Here’s what the study streak looks like."><em>Here’s what the study streak looks like.</em></p>\n<ul>\n<li>\n<p>The time in the UK as represented in UTC would simply be UTC+00:00, because as I said, UTC time is the same as GMT.</p>\n</li>\n<li>\n<p>If we wanted the time in Australia, it would be represented as UTC+09:30 as it is 9 hours and 30 minutes ahead of the time in the UK.</p>\n</li>\n<li>\n<p>The time in Hawaii would be UTC-10:00 as it is 10 hours behind of the time in the UK.</p>\n</li>\n</ul>\n<h2>Dealing with UTC Server</h2>\n<p>Okay so back to Revisify. By knowing this, if we stored the date/time in UTC+00:00, we could then convert that to the local time of the student is located. Luckily since I only have 1 server which happens to be based in the UK, the dates in the database are already in UTC+00:00. However, I still needed to change some Python code on the server:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime\n\n<span class="token comment"># This gets the server time. If I moved the server to say Australia, it would not get UTC time.</span>\ndate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># This gets UTC time regardless of where the server is located.</span>\ndate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Dealing with UTC Client Side</h2>\n<p>Now that I ‘officially’ store UTC dates/times in the database, I need to convert these correctly to the student’s local time. This can be difficult to program yourself but luckily there’s a fantastic Javascript Library called <a href="http://momentjs.com/">Moment.js</a> which takes out **a lot **of the strain of converting timezones. Here’s how easy it was for me to convert the UTC date/times that I got from the database into the local time of the student’s computer:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Server\'s UTC datetime</span>\n<span class="token keyword">var</span> utcDate <span class="token operator">=</span> <span class="token string">\'2016-12-20 14:56:51\'</span>\n\n<span class="token comment">// Client\'s local datetime</span>\n<span class="token keyword">var</span> localDate <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>utcDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>That simple line of code is all that is needed for the client to get the right date. This library has a lot more functions but I will leave that for another time.</p>\n<p>Back to the study streak, I updated the code so that the server sends the dates and some Javascript on the client side calculates the study streak. The final result is <a href="https://gist.github.com/PavSidhu/8a3b04bc7f16ba6a2eb38f6803254fda">available here</a> with some annotations as to how it works. You can also see it below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Values for dates are received from the server</span>\ndates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> dates<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> date <span class="token operator">=</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> localDate <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'DDMMYY\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'DDMMYY\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> yesterday <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'DDMMYY\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>localDate <span class="token operator">===</span> today<span class="token punctuation">)</span> <span class="token operator">||</span>\n        localDate <span class="token operator">===</span> yesterday<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        streak <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> previousDate <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>dates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'DDMMYY\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> previousDateYesterday <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>dates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'days\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'DDMMYY\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>localDate <span class="token operator">!==</span> previousDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>localDate <span class="token operator">===</span> previousDateYesterday<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        streak <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>There we have it. I have found that now I’ve used timezones once, it isn’t as difficult, but still somewhat confusing if I think about it in too much detail.</p>\n<p>If you really want to melt your brain, this YouTube video by Tom Scott explains timezones in much more detail, enjoy (or not).</p>\n<p><div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 50%; position: relative; height: 0; overflow: hidden;"\n          >\n            <div><iframe src="https://www.youtube.com/embed/-5wpm-gesOY" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe></div>\n          </div>\n          </div></p>'}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-271752c5863455c9a715.js.map